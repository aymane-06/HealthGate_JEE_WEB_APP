<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/build-deploy.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build-deploy.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot;==================================&quot;&#10;echo &quot; CliniqueDigitale - Complete Build &amp; Deploy&quot;&#10;echo &quot;==================================&quot;&#10;echo &quot;&quot;&#10;&#10;cd /home/aymane/IdeaProjects/CliniqueDigitaleJEE&#10;&#10;# Find JDK 21&#10;echo &quot; Finding JDK 21...&quot;&#10;JDK21_PATH=&quot;&quot;&#10;&#10;# Try common paths&#10;for path in /usr/lib/jvm/java-21* /usr/lib/jvm/jdk-21* /opt/jdk-21*; do&#10;    if [ -d &quot;$path&quot; ] &amp;&amp; [ -f &quot;$path/bin/javac&quot; ]; then&#10;        JDK21_PATH=&quot;$path&quot;&#10;        break&#10;    fi&#10;done&#10;&#10;if [ -z &quot;$JDK21_PATH&quot; ]; then&#10;    echo &quot;❌ JDK 21 NOT FOUND!&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Install JDK 21 now:&quot;&#10;    echo &quot;  sudo apt update&quot;&#10;    echo &quot;  sudo apt install openjdk-21-jdk&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Then run this script again.&quot;&#10;    exit 1&#10;fi&#10;&#10;echo &quot;✅ Found JDK 21 at: $JDK21_PATH&quot;&#10;export JAVA_HOME=&quot;$JDK21_PATH&quot;&#10;export PATH=&quot;$JAVA_HOME/bin:$PATH&quot;&#10;&#10;echo &quot;Using Java: $(java -version 2&gt;&amp;1 | head -1)&quot;&#10;echo &quot;&quot;&#10;&#10;echo &quot;Step 1: Stopping Docker containers...&quot;&#10;docker-compose down 2&gt;/dev/null || true&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 2: Cleaning target directory...&quot;&#10;rm -rf target/&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 3: Building project with Maven using JDK 21...&quot;&#10;JAVA_HOME=&quot;$JDK21_PATH&quot; mvn clean package -DskipTests&#10;&#10;if [ $? -ne 0 ]; then&#10;    echo &quot;&quot;&#10;    echo &quot;❌ BUILD FAILED!&quot;&#10;    exit 1&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 4: Verifying WAR file...&quot;&#10;if [ -f target/CliniqueDigitaleJEE.war ]; then&#10;    WAR_SIZE=$(ls -lh target/CliniqueDigitaleJEE.war | awk '{print $5}')&#10;    echo &quot;✅ WAR file created: $WAR_SIZE&quot;&#10;else&#10;    echo &quot;❌ WAR file not found!&quot;&#10;    exit 1&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 5: Starting Docker containers...&quot;&#10;docker-compose up -d --build&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 6: Waiting for Tomcat (25 seconds)...&quot;&#10;sleep 25&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 7: Testing servlet...&quot;&#10;HTTP_CODE=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8081/test)&#10;if [ &quot;$HTTP_CODE&quot; = &quot;200&quot; ]; then&#10;    echo &quot;✅ SUCCESS! Servlet is working!&quot;&#10;else&#10;    echo &quot;⚠️  HTTP $HTTP_CODE - Check logs: docker logs clinique_tomcat&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;==================================&quot;&#10;echo &quot;✅ DONE!&quot;&#10;echo &quot;==================================&quot;&#10;echo &quot; Visit: http://localhost:8081/test&quot;&#10;echo &quot;&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build-jdk21.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build-jdk21.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;echo &quot; Detecting JDK 21 installation...&quot;&#10;echo &quot;&quot;&#10;&#10;# Try to find JDK 21&#10;JDK21_PATH=&quot;&quot;&#10;&#10;# Common JDK installation paths&#10;POSSIBLE_PATHS=(&#10;    &quot;/usr/lib/jvm/java-21-openjdk-amd64&quot;&#10;    &quot;/usr/lib/jvm/java-21-openjdk&quot;&#10;    &quot;/usr/lib/jvm/jdk-21&quot;&#10;    &quot;/opt/jdk-21&quot;&#10;    &quot;/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home&quot;&#10;    &quot;$HOME/.sdkman/candidates/java/21*&quot;&#10;)&#10;&#10;# Check each path&#10;for path in &quot;${POSSIBLE_PATHS[@]}&quot;; do&#10;    if [ -d &quot;$path&quot; ] &amp;&amp; [ -f &quot;$path/bin/javac&quot; ]; then&#10;        JDK21_PATH=&quot;$path&quot;&#10;        echo &quot;✅ Found JDK 21 at: $JDK21_PATH&quot;&#10;        break&#10;    fi&#10;done&#10;&#10;# If not found in common paths, try to find it&#10;if [ -z &quot;$JDK21_PATH&quot; ]; then&#10;    echo &quot;⚠️  JDK 21 not found in common locations&quot;&#10;    echo &quot;Searching for JDK 21...&quot;&#10;    &#10;    # Try using update-alternatives (Linux)&#10;    if command -v update-alternatives &amp;&gt; /dev/null; then&#10;        JDK21_PATH=$(update-alternatives --list java 2&gt;/dev/null | grep &quot;java-21&quot; | head -n1 | sed 's|/bin/java||')&#10;    fi&#10;    &#10;    # Try using /usr/libexec/java_home (macOS)&#10;    if [ -z &quot;$JDK21_PATH&quot; ] &amp;&amp; command -v /usr/libexec/java_home &amp;&gt; /dev/null; then&#10;        JDK21_PATH=$(/usr/libexec/java_home -v 21 2&gt;/dev/null)&#10;    fi&#10;fi&#10;&#10;if [ -z &quot;$JDK21_PATH&quot; ]; then&#10;    echo &quot;❌ JDK 21 not found on your system!&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Please install JDK 21:&quot;&#10;    echo &quot;  Ubuntu/Debian: sudo apt install openjdk-21-jdk&quot;&#10;    echo &quot;  Arch: sudo pacman -S jdk21-openjdk&quot;&#10;    echo &quot;  macOS: brew install openjdk@21&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Or download from: https://adoptium.net/temurin/releases/?version=21&quot;&#10;    exit 1&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot; Setting JAVA_HOME to JDK 21...&quot;&#10;export JAVA_HOME=&quot;$JDK21_PATH&quot;&#10;export PATH=&quot;$JAVA_HOME/bin:$PATH&quot;&#10;&#10;echo &quot;JAVA_HOME=$JAVA_HOME&quot;&#10;echo &quot;&quot;&#10;&#10;# Verify Java version&#10;echo &quot; Verifying Java version...&quot;&#10;java -version&#10;&#10;echo &quot;&quot;&#10;echo &quot; Verifying Maven is using JDK 21...&quot;&#10;mvn -v&#10;&#10;echo &quot;&quot;&#10;echo &quot; Building project with JDK 21...&quot;&#10;cd /home/aymane/IdeaProjects/CliniqueDigitaleJEE&#10;mvn clean package&#10;&#10;if [ $? -eq 0 ]; then&#10;    echo &quot;&quot;&#10;    echo &quot;✅ BUILD SUCCESS!&quot;&#10;    echo &quot;&quot;&#10;    echo &quot; Deploying to Docker...&quot;&#10;    docker-compose down&#10;    docker-compose up -d --build&#10;    &#10;    echo &quot;&quot;&#10;    echo &quot;⏳ Waiting for Tomcat to start (20 seconds)...&quot;&#10;    sleep 20&#10;    &#10;    echo &quot;&quot;&#10;    echo &quot; Testing servlet...&quot;&#10;    curl -s http://localhost:8081/test | grep -q &quot;Success&quot; &amp;&amp; echo &quot;✅ Servlet is working!&quot; || echo &quot;⚠️  Servlet may need more time to start&quot;&#10;    &#10;    echo &quot;&quot;&#10;    echo &quot;✅ Deployment complete!&quot;&#10;    echo &quot; Visit: http://localhost:8081/test&quot;&#10;else&#10;    echo &quot;&quot;&#10;    echo &quot;❌ BUILD FAILED!&quot;&#10;    echo &quot;Check the error messages above.&quot;&#10;fi&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/cliniqueDigitaleJEE/service/DepartmentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/cliniqueDigitaleJEE/service/DepartmentService.java" />
              <option name="originalContent" value="package com.cliniqueDigitaleJEE.service;&#10;&#10;import com.cliniqueDigitaleJEE.model.Department;&#10;import com.cliniqueDigitaleJEE.repository.Interfaces.DepartmentRepository;&#10;import jakarta.ejb.Stateless;&#10;import jakarta.inject.Inject;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Stateless&#10;public class DepartmentService {&#10;&#10;    @Inject&#10;    private DepartmentRepository departmentRepository;&#10;&#10;    public List&lt;Department&gt; findAllDepartments() {&#10;        return departmentRepository.findAll();&#10;    }&#10;&#10;    public Department findById(UUID id) {&#10;        return departmentRepository.findById(id);&#10;    }&#10;&#10;    public void save(Department department) {&#10;        departmentRepository.save(department);&#10;    }&#10;&#10;    public void update(Department department) {&#10;        departmentRepository.update(department);&#10;    }&#10;&#10;    public void delete(UUID id) {&#10;        departmentRepository.delete(id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.cliniqueDigitaleJEE.service;&#10;&#10;import com.cliniqueDigitaleJEE.model.Department;&#10;import com.cliniqueDigitaleJEE.repository.Interfaces.DepartmentRepository;&#10;import jakarta.ejb.Stateless;&#10;import jakarta.inject.Inject;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Stateless&#10;public class DepartmentService {&#10;&#10;    @Inject&#10;    private DepartmentRepository departmentRepository;&#10;&#10;    public List&lt;Department&gt; findAllDepartments() {&#10;        List&lt;Department&gt; departments = departmentRepository.findAll();&#10;        // Force initialization of specialties to avoid LazyInitializationException&#10;        for (Department d : departments) {&#10;            if (d.getSpecialties() != null) d.getSpecialties().size();&#10;        }&#10;        return departments;&#10;    }&#10;&#10;    public Department findById(UUID id) {&#10;        Department d = departmentRepository.findById(id);&#10;        if (d != null &amp;&amp; d.getSpecialties() != null) d.getSpecialties().size();&#10;        return d;&#10;    }&#10;&#10;    public void save(Department department) {&#10;        departmentRepository.save(department);&#10;    }&#10;&#10;    public void update(Department department) {&#10;        departmentRepository.update(department);&#10;    }&#10;&#10;    public void delete(UUID id) {&#10;        departmentRepository.delete(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>