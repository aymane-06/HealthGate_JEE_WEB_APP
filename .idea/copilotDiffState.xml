<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/cliniqueDigitaleJEE/controller/doctor/DoctorAvailabilityApiServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/cliniqueDigitaleJEE/controller/doctor/DoctorAvailabilityApiServlet.java" />
              <option name="originalContent" value="package com.cliniqueDigitaleJEE.controller.doctor;&#10;&#10;import com.cliniqueDigitaleJEE.dto.UserDTO;&#10;import com.cliniqueDigitaleJEE.model.Appointment;&#10;import com.cliniqueDigitaleJEE.model.Availability;&#10;import com.cliniqueDigitaleJEE.model.Doctor;&#10;import com.cliniqueDigitaleJEE.service.DoctorService;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import jakarta.inject.Inject;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.MultipartConfig;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@WebServlet(urlPatterns = {&quot;/api/doctor/availabilities&quot;, &quot;/api/doctor/availabilities/*&quot;})&#10;@MultipartConfig&#10;public class DoctorAvailabilityApiServlet extends HttpServlet {&#10;&#10;    @Inject&#10;    private DoctorService doctorService;&#10;&#10;    private static final ObjectMapper objectMapper = new ObjectMapper()&#10;        .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        String pathInfo = req.getPathInfo();&#10;&#10;&#10;&#10;        if (pathInfo != null &amp;&amp; !pathInfo.equals(&quot;/&quot;)) {&#10;            String doctorID = pathInfo.substring(1);&#10;            Doctor doctor = doctorService.findById(UUID.fromString(doctorID));&#10;            if(doctor == null) {&#10;                resp.setStatus(404);&#10;                out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Doctor not found\&quot;}&quot;);&#10;                out.flush();&#10;                return;&#10;            }&#10;            List&lt;Availability&gt; doctorAvailabilities = doctor.getAvailabilities();&#10;            StringBuilder jsonResponse = new StringBuilder();&#10;            jsonResponse.append(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;data\&quot;:[&quot;);&#10;            for (int i = 0; i &lt; doctorAvailabilities.size(); i++) {&#10;                Availability availability = doctorAvailabilities.get(i);&#10;                jsonResponse.append(&quot;{&quot;);&#10;                jsonResponse.append(&quot;\&quot;id\&quot;:\&quot;&quot;).append(availability.getId()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;day\&quot;:\&quot;&quot;).append(availability.getDay()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;startTime\&quot;:\&quot;&quot;).append(availability.getStartTime()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;endTime\&quot;:\&quot;&quot;).append(availability.getEndTime()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;status\&quot;:\&quot;&quot;).append(availability.getStatus()).append(&quot;\&quot;&quot;);&#10;                jsonResponse.append(&quot;}&quot;);&#10;                if (i &lt; doctorAvailabilities.size() - 1) {&#10;                    jsonResponse.append(&quot;,&quot;);&#10;                }&#10;        }&#10;            jsonResponse.append(&quot;]}&quot;);&#10;            resp.setStatus(200);&#10;            out.write(jsonResponse.toString());&#10;            out.flush();&#10;            return;&#10;        }&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;data\&quot;:[]}&quot;);&#10;        out.flush();&#10;    }&#10;&#10;    @Override&#10;    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        String pathInfo = req.getPathInfo();&#10;        if (pathInfo == null || pathInfo.equals(&quot;/&quot;)) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Availability ID is required in the URL\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;&#10;        }&#10;        Appointment appointment=objectMapper.readValue(req.getInputStream(), Appointment.class);&#10;&#10;        System.out.println(&quot;===============================================&quot;);&#10;        System.out.println(appointment.getId());&#10;        System.out.println(&quot;===============================================&quot;);&#10;&#10;        String openTime = req.getParameter(&quot;startTime&quot;);&#10;        String closeTime = req.getParameter(&quot;endTime&quot;);&#10;        String status = req.getParameter(&quot;status&quot;);&#10;&#10;        if (openTime == null || openTime.trim().isEmpty() || closeTime == null || closeTime.trim().isEmpty() || status == null || status.trim().isEmpty()) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Both openTime , closeTime and status parameters are required\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;        }&#10;&#10;        String availabilityID = pathInfo.substring(1);&#10;        try {&#10;            UUID availabilityUUID = UUID.fromString(availabilityID);&#10;        } catch (IllegalArgumentException e) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Invalid Availability ID format\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;        }&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;message\&quot;:\&quot;Not implemented yet\&quot;}&quot;);&#10;        out.flush();&#10;    }&#10;&#10;    @Override&#10;    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        // TODO: Implement logic to delete an availability&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;message\&quot;:\&quot;Not implemented yet\&quot;}&quot;);&#10;        out.flush();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.cliniqueDigitaleJEE.controller.doctor;&#10;&#10;import com.cliniqueDigitaleJEE.dto.UserDTO;&#10;import com.cliniqueDigitaleJEE.model.Appointment;&#10;import com.cliniqueDigitaleJEE.model.Availability;&#10;import com.cliniqueDigitaleJEE.model.Doctor;&#10;import com.cliniqueDigitaleJEE.service.DoctorService;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import jakarta.inject.Inject;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.MultipartConfig;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@WebServlet(urlPatterns = {&quot;/api/doctor/availabilities&quot;, &quot;/api/doctor/availabilities/*&quot;})&#10;@MultipartConfig&#10;public class DoctorAvailabilityApiServlet extends HttpServlet {&#10;&#10;    @Inject&#10;    private DoctorService doctorService;&#10;&#10;    private static final ObjectMapper objectMapper = new ObjectMapper()&#10;        .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        String pathInfo = req.getPathInfo();&#10;&#10;&#10;&#10;        if (pathInfo != null &amp;&amp; !pathInfo.equals(&quot;/&quot;)) {&#10;            String doctorID = pathInfo.substring(1);&#10;            Doctor doctor = doctorService.findById(UUID.fromString(doctorID));&#10;            if(doctor == null) {&#10;                resp.setStatus(404);&#10;                out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Doctor not found\&quot;}&quot;);&#10;                out.flush();&#10;                return;&#10;            }&#10;            List&lt;Availability&gt; doctorAvailabilities = doctor.getAvailabilities();&#10;            StringBuilder jsonResponse = new StringBuilder();&#10;            jsonResponse.append(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;data\&quot;:[&quot;);&#10;            for (int i = 0; i &lt; doctorAvailabilities.size(); i++) {&#10;                Availability availability = doctorAvailabilities.get(i);&#10;                jsonResponse.append(&quot;{&quot;);&#10;                jsonResponse.append(&quot;\&quot;id\&quot;:\&quot;&quot;).append(availability.getId()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;day\&quot;:\&quot;&quot;).append(availability.getDay()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;startTime\&quot;:\&quot;&quot;).append(availability.getStartTime()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;endTime\&quot;:\&quot;&quot;).append(availability.getEndTime()).append(&quot;\&quot;,&quot;);&#10;                jsonResponse.append(&quot;\&quot;status\&quot;:\&quot;&quot;).append(availability.getStatus()).append(&quot;\&quot;&quot;);&#10;                jsonResponse.append(&quot;}&quot;);&#10;                if (i &lt; doctorAvailabilities.size() - 1) {&#10;                    jsonResponse.append(&quot;,&quot;);&#10;                }&#10;        }&#10;            jsonResponse.append(&quot;]}&quot;);&#10;            resp.setStatus(200);&#10;            out.write(jsonResponse.toString());&#10;            out.flush();&#10;            return;&#10;        }&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;data\&quot;:[]}&quot;);&#10;        out.flush();&#10;    }&#10;&#10;    @Override&#10;    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        String pathInfo = req.getPathInfo();&#10;        if (pathInfo == null || pathInfo.equals(&quot;/&quot;)) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Availability ID is required in the URL\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;&#10;        }&#10;        Appointment appointment=objectMapper.readValue(req.getInputStream(), Appointment.class);&#10;&#10;        System.out.println(&quot;===============================================&quot;);&#10;        System.out.println(appointment.getId());&#10;        System.out.println(&quot;===============================================&quot;);&#10;&#10;        String openTime = req.getParameter(&quot;startTime&quot;);&#10;        String closeTime = req.getParameter(&quot;endTime&quot;);&#10;        String status = req.getParameter(&quot;status&quot;);&#10;&#10;        if (openTime == null || openTime.trim().isEmpty() || closeTime == null || closeTime.trim().isEmpty() || status == null || status.trim().isEmpty()) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Both openTime , closeTime and status parameters are required\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;        }&#10;&#10;        String availabilityID = pathInfo.substring(1);&#10;        try {&#10;            UUID availabilityUUID = UUID.fromString(availabilityID);&#10;        } catch (IllegalArgumentException e) {&#10;            resp.setStatus(400);&#10;            out.write(&quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;Invalid Availability ID format\&quot;}&quot;);&#10;            out.flush();&#10;            return;&#10;        }&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;message\&quot;:\&quot;Not implemented yet\&quot;}&quot;);&#10;        out.flush();&#10;    }&#10;&#10;    @Override&#10;    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        // TODO: Implement logic to delete an availability&#10;        out.write(&quot;{\&quot;status\&quot;:\&quot;success\&quot;,\&quot;message\&quot;:\&quot;Not implemented yet\&quot;}&quot;);&#10;        out.flush();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>